#+TITLE: README
#+AUTHOR: wang1zhen
#+EMAIL: wang1zhen97@gmail.com
#+STARTUP: content

* Solarion Emacs

  Solarion Emacs aims to enhance the Emacs experience, mainly in Terminal mode. The whole README file is a symlink to =solarion-emacs.org=, and with =org babel=, this file could be tangled into different emacs-lisp files under =$HOME/.emacs.d/=.

* Installation

  *Clone the repository*

  #+begin_src sh
    git clone https://github.com/wang1zhen/solarion-emacs ~/.emacs.d
  #+end_src

  *Tangle the org file*

  #+begin_src shell
    emacs -q ~/.emacs.d/solarion-emacs.org
  #+end_src

  Press =C-c C-v t= or =M-x org-babel-tangle= to tangle the org file into =init.el=.
  After =org-babel-tangle= is finished, =C-x C-c= to quit emacs.

  *Create alias for running emacs in terminal mode*

  #+begin_src shell
    echo 'alias e="emacs -nw"' >> ~/.zshrc
    source ~/.zshrc
  #+end_src

  *Launch Emacs and have fun!*

* init.el

  #+begin_src emacs-lisp :tangle ./init.el
    ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-

    ;;; Code:

    (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

    ;; Custom file
    (setq custom-file (concat user-emacs-directory "custom.el"))
    (when (and (file-exists-p custom-file) (file-readable-p custom-file)
               (load custom-file)))

    (require 'init-benchmarking)

    ;; Adjust garbage collection thresholds during startup, and thereafter

    (let ((normal-gc-cons-threshold (* 20 1024 1024))
          (init-gc-cons-threshold (* 128 1024 1024)))
      (setq gc-cons-threshold init-gc-cons-threshold)
      (add-hook 'emacs-startup-hook
                (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

    ;; Packages
    (require 'init-package)

    ;; Useful functions defined
    (require 'init-func)

    ;; Preferences
    (require 'init-basic)
    (require 'init-hydra)

    (require 'init-ui)
    (when (display-graphic-p)
      (require 'init-fonts))       ;; 字体检查 言 ♪
    (require 'init-edit)
    (require 'init-evil)
    (require 'init-ivy)
    (require 'init-company)
    (require 'init-yasnippet)


    (require 'init-ibuffer)


    ;; 还没决定好放到哪里的设置
    (global-set-key [f12] 'indent-buffer)
    (add-hook 'after-save-hook #'org-babel-auto-tangle)
    (require 'org-tempo)
  #+end_src

* init-benchmarking.el

  #+begin_src emacs-lisp :tangle ./lisp/init-benchmarking.el :mkdirp yes
    ;;; init-benchmarking.el --- Measure startup time -*- lexical-binding: t -*-

    ;;; Code:

    (defun solarion/startup-benchmark ()
      "Showing Emacs initializing time, packages loaded and GC"
      (format "Emacs loaded %d packages in %.2f ms with %d garbage collections."
              (- (length load-path) (length (get 'load-path 'initial-value)))
              (* 1000 (float-time (time-subtract after-init-time before-init-time)))
              gcs-done))

    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq init-message (solarion/startup-benchmark))
                (message init-message)))

    (provide 'init-benchmarking)
  #+end_src

* init-package.el

  #+begin_src emacs-lisp :tangle ./lisp/init-package.el :mkdirp yes
    ;;; init-package.el --- Initialize package configurations -*- lexical-binding: t -*-

    ;;; Code:

    ;; Uncomment for mirrors in China
    ;; (setq package-archives '(("elpa" . "https://elpa.emacs-china.org/gnu/")
    ;;           ("melpa" . "https://elpa.emacs-china.org/melpa/")
    ;;                          ("org" . "https://elpa.emacs-china.org/org/")))

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    ;; Initialize packages
    (unless (bound-and-true-p package--initialized) ; To avoid warnings in 27
      (setq package-enable-at-startup nil)          ; To prevent initializing twice
      (package-initialize))

    ;; Setup `use-package'
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    ;; Should set before loading `use-package'
    (eval-and-compile
      (setq use-package-always-ensure t)
      (setq use-package-always-defer t)
      (setq use-package-expand-minimally t)
      (setq use-package-enable-imenu-support t))

    (eval-when-compile
      (require 'use-package))

    ;; Required by `use-package'
    (use-package diminish)
    (use-package bind-key)

    ;; Update GPG keyring for GNU ELPA
    (use-package gnu-elpa-keyring-update)

    ;; Auto update packages
    (use-package auto-package-update
      :init
      (setq auto-package-update-delete-old-versions t
            auto-package-update-hide-results t
            auto-package-update-interval 7
            auto-package-update-prompt-before-update t)
      (defalias 'upgrade-packages #'auto-package-update-now))

    (use-package try)

    (provide 'init-package)
  #+end_src

* init-basic.el

  #+begin_src emacs-lisp :tangle ./lisp/init-basic.el :mkdirp yes
    ;;; init-basic.el --- Default configurations -*- lexical-binding: t -*-

    ;;; Code:

    (setq user-full-name solarion-full-name
          user-mail-address solarion-mail-address)

    ;; Increase how much is read from processes in a single chunk (default is 4kb)
    (setq read-process-output-max #x10000)  ; 64kb

    ;; Garbage Collector Magic Hack
    (use-package gcmh
      :diminish
      :init
      (setq gcmh-idle-delay 5
            gcmh-high-cons-threshold #x1000000) ; 16MB
      (gcmh-mode 1))

    ;; Encoding
    ;; UTF-8 as the default coding system
    (when (fboundp 'set-charset-priority)
      (set-charset-priority 'unicode))

    ;; Explicitly set the prefered coding systems to avoid annoying prompt
    ;; from emacs (especially on Microsoft Windows)
    (prefer-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8)

    (set-language-environment 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-buffer-file-coding-system 'utf-8)
    (set-clipboard-coding-system 'utf-8)
    (set-file-name-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (modify-coding-system-alist 'process "*" 'utf-8)

    ;; Ensure environment variables inside Emacs look the same as in the user's shell
    (use-package exec-path-from-shell
      :init
      (setq exec-path-from-shell-variables '("PATH" "MANPATH")
            exec-path-from-shell-arguments '("-l"))
      (exec-path-from-shell-initialize))

    ;; Start server
    (use-package server
      :ensure nil
      :hook (after-init . server-mode))

    ;; Go to the last place when previously visited the file
    (use-package saveplace
      :ensure nil
      :hook (after-init . save-place-mode))

    (use-package recentf
      :ensure nil
      :bind (("C-x C-r" . recentf-open-files))
      :hook (after-init . recentf-mode)
      :init (setq recentf-max-saved-items 300
                  recentf-exclude
                  '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                    "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                    "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                    "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
                    (lambda (file) (file-in-directory-p file package-user-dir))))
      :config
      (push (expand-file-name recentf-save-file) recentf-exclude)
      (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))

    (use-package savehist
      :ensure nil
      :hook (after-init . savehist-mode)
      :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                  history-length 1000
                  savehist-additional-variables '(mark-ring
                                                  global-mark-ring
                                                  search-ring
                                                  regexp-search-ring
                                                  extended-command-history)
                  savehist-autosave-interval 300))

    (use-package simple
      :ensure nil
      :hook ((after-init . size-indication-mode)
             (text-mode . visual-line-mode)
             ((prog-mode org-mode markdown-mode conf-mode) . enable-trailing-whitespace))
      :init
      (setq column-number-mode t
            line-number-mode t
            ;; kill-whole-line t               ; Kill line including '\n'
            line-move-visual t
            ;; track-eol t                     ; Keep cursor at end of lines. Require line-move-visual is nil.
            set-mark-command-repeat-pop t)  ; Repeating C-SPC after popping mark pops it again

      ;; Visualize TAB, (HARD) SPACE, NEWLINE
      (setq-default show-trailing-whitespace nil) ; Don't show trailing whitespace by default
      (defun enable-trailing-whitespace ()
        "Show trailing spaces and delete on saving."
        (setq show-trailing-whitespace t)
        (add-hook 'before-save-hook #'delete-trailing-whitespace nil t)))

    (use-package time
      :ensure nil
      :init (setq display-time-24hr-format t
                  display-time-day-and-date t))

    (use-package so-long
      :ensure nil
      :hook (after-init . global-so-long-mode)
      :config (setq so-long-threshold 400))

    ;; Misc
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq-default major-mode 'emacs-lisp-mode
                  tab-width 4
                  indent-tabs-mode nil)     ; Permanently indent with spaces, never with TABs

    (setq visible-bell t
          inhibit-compacting-font-caches t  ; Don’t compact font caches during GC.
          delete-by-moving-to-trash t       ; Deleting files go to OS's trash folder
          make-backup-files nil             ; Forbide to make backup files
          create-lockfiles nil              ; Forbide to make lockfiles
          auto-save-default nil             ; Disable auto save

          uniquify-buffer-name-style 'post-forward-angle-brackets ; Show path if names are same
          adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*"
          adaptive-fill-first-line-regexp "^* *$"
          sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*"
          sentence-end-double-space nil)

    ;; Use the system clipboard
    (setq x-select-enable-clipboard t)

    ;; Always focus the help window
    (setq help-window-select t)

    ;; Enable mouse in terminal mode
    (xterm-mouse-mode)

    (provide 'init-basic)
  #+end_src

* init-hydra.el

  #+begin_src emacs-lisp :tangle ./lisp/init-hydra.el :mkdirp yes
    ;;; init-hydra.el --- Hydra configurations -*- lexical-binding: t -*-

    ;;; Code:

    ;; TODO

    (provide 'init-hydra)
  #+end_src

* init-func.el

  #+begin_src emacs-lisp :tangle ./lisp/init-func.el :mkdirp yes
    ;;; init-func.el --- Useful functions are defined here -*- lexical-binding: t -*-

    ;;; Code:

    (defun indent-buffer ()
      (interactive)
      (save-excursion
        (indent-region (point-min) (point-max) nil)))

    ;; Font
    (defun font-installed-p (font-name)
      "Check if font with FONT-NAME is available."
      (find-font (font-spec :name font-name)))

    ;; Auto tangle babel file
    (defun org-babel-auto-tangle ()
      (when (and (eq major-mode 'org-mode)
                 (string-equal (buffer-name) "solarion-emacs.org")
                 (y-or-n-p "Tangle?"))
        (org-babel-tangle)))

    ;; Define split-window-below-and-focus and split-window-right-and-focus
    (defun evil-window-split-and-focus ()
      "Split the window vertically and focus the new window."
      (interactive)
      (evil-window-split)
      (windmove-down))

    (defun evil-window-vsplit-and-focus ()
      "Split the window horizontally and focus the new window."
      (interactive)
      (split-window-right)
      (windmove-right))

    (provide 'init-func)
  #+end_src

* init-ui.el

  #+begin_src emacs-lisp :tangle ./lisp/init-ui.el :mkdirp yes
    ;;; init-ui.el --- Better lookings and appearances. -*- lexical-binding: t -*-

    ;;; Code:

    ;; Title
    (setq frame-title-format '("Solarion Emacs - %b")
          icon-title-format frame-title-format)

    ;; Optimization
    (setq idle-update-delay 1.0)

    (setq-default cursor-in-non-selected-windows nil)
    (setq highlight-nonselected-windows nil)

    (scroll-bar-mode -1) ;; Disable visible scrollbar
    (tool-bar-mode -1) ;; Disable the toolbar
    (menu-bar-mode -1) ;; Disable the menu bar
    (tooltip-mode -1) ;; Disable tooltips
    (set-fringe-mode 10) ;; 左右边框

    ;; Theme
    (use-package doom-themes
      :custom-face
      (doom-modeline-buffer-file ((t (:inherit (mode-line bold)))))
      :custom
      (doom-themes-enable-bold t)
      (doom-themes-enable-italic t)
      :init
      (load-theme 'doom-gruvbox)
      :config
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

    ;; Mode-line
    (use-package doom-modeline
      :diminish doom-modeline-mode
      :hook (after-init . doom-modeline-mode))

    ;; Icons
    ;; NOTE: Must run `M-x all-the-icons-install-fonts', and install fonts manually on Windows
    (use-package all-the-icons
      :if (display-graphic-p)
      :init (unless (font-installed-p "all-the-icons")
              (all-the-icons-install-fonts t)))

    (use-package display-line-numbers
      :ensure nil
      :init
      (global-display-line-numbers-mode)
      :config
      (dolist (mode '(org-mode-hook
                      term-mode-hook
                      eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0)))))

    ;; Display ugly ^L page breaks as tidy horizontal lines
    (use-package page-break-lines
      :diminish
      :hook (after-init . global-page-break-lines-mode))

    ;; Suppress GUI features
    (setq use-file-dialog nil
          use-dialog-box nil
          inhibit-startup-screen t
          inhibit-startup-echo-area-message t)

    ;; Display dividers between windows
    (setq window-divider-default-places t
          window-divider-default-bottom-width 1
          window-divider-default-right-width 1)
    (add-hook 'window-setup-hook #'window-divider-mode)

    (use-package rainbow-delimiters
      :hook
      (prog-mode . rainbow-delimiters-mode)
      (LaTeX-mode . rainbow-delimiters-mode))

    (use-package which-key
      :diminish which-key-mode
      :init
      (setq which-key-idle-delay 0.2
            which-key-sort-order 'which-key-key-order-alpha)
      (which-key-mode))

    (use-package command-log-mode)

    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))

    (use-package winum
      :init (winum-mode))

    (provide 'init-ui)
  #+end_src

* init-fonts.el

  The font settings are mainly for GUI Emacs, this would not affect TUI Emacs.
  #+begin_src emacs-lisp :tangle ./lisp/init-fonts.el :mkdirp yes
    ;;; init-fonts.el --- Fonts configurations (for GUI) -*- lexical-bindings: t -*-

    ;;; Code:

    (require 'cl-lib)

    ;; Set default font
    (cl-loop for font in '("CaskaydiaCove Nerd Font" "Cascadia Code"
                           "FiraCode Nerd Font" "Fira Code"
                           "Hack" "Source Code Pro" "Consolas")
             when (font-installed-p font)
             return (set-face-attribute 'default nil
                                        :font font
                                        :height (* font-size-factor 60)))

    ;; Specify font for all unicode characters
    (cl-loop for font in '("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Symbol")
             when (font-installed-p font)
             return(set-fontset-font t 'unicode font nil 'prepend))

    ;; Specify font for Chinese characters
    (cl-loop for font in '("Sarasa Mono SC" "WenQuanYi Micro Hei Mono" "Microsoft Yahei")
             when (font-installed-p font)
             return (set-fontset-font t '(#x4e00 . #x9fff) font))

    (provide 'init-fonts)
  #+end_src

* init-edit.el

  #+begin_src emacs-lisp :tangle ./lisp/init-edit.el :mkdirp yes
    ;;; init-edit.el --- Initialize editing configurations -*- lexical-binding: t -*-

    ;;; Code:

    ;; Automatically reload files was modified by external program
    (use-package autorevert
      :ensure nil
      :diminish
      :init
      (setq global-auto-revert-non-file-buffers t)
      :hook (after-init . global-auto-revert-mode))

    ;; Jump to things in Emacs tree-style
    (use-package avy
      :bind (("C-'" . avy-goto-char-2)
             ;;("M-g f" . avy-goto-line)
             )
      :hook (after-init . avy-setup-default)
      :config (setq avy-all-windows nil
                    avy-all-windows-alt t
                    avy-background t
                    avy-style 'at-full))

    (use-package beginend
      :diminish beginend-global-mode
      :hook (after-init . beginend-global-mode))

    ;; Evil-nerd-commenter

    ;; A comprehensive visual interface to diff & patch
    (use-package ediff
      :ensure nil
      :hook(;; show org ediffs unfolded
            (ediff-prepare-buffer . outline-show-all)
            ;; restore window layout when done
            ;; (ediff-quit . winner-undo)
            )
      :config
      (setq ediff-window-setup-function 'ediff-setup-windows-plain
            ediff-split-window-function 'split-window-vertically
            ediff-merge-split-window-function 'split-window-vertically))

    ;; Automatic parenthesis pairing
    (use-package elec-pair
      :ensure nil
      :hook (after-init . electric-pair-mode)
      :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))

    ;; Increase selected region by semantic units
    (use-package expand-region
      :bind ("C-c =" . er/expand-region))

    ;; Hungry deletion
    (use-package hungry-delete
      :diminish
      :hook (after-init . global-hungry-delete-mode)
      :init (setq hungry-delete-except-modes
                  '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode)))

    ;; Move to the beginning/end of line or code
    (use-package mwim)

    ;; Undo-fu
    (use-package undo-fu
      :bind
      ("C-/" . undo-fu-only-undo)
      ("C-r" . undo-fu-only-redo)
      ("C-x u" . undo-fu-only-undo)
      ("C-x r" . undo-fu-only-redo))

    ;; Handling capitalized subwords in a nomenclature
    (use-package subword
      :ensure nil
      :diminish
      :hook ((prog-mode . subword-mode)
             (minibuffer-setup . subword-mode)))

    (use-package sudo-edit)

    (provide 'init-edit)
  #+end_src

* init-evil.el

  Evil is a vim emulator for Emacs. I use Emacs keybindings to move cursor within the insert state, so I disabled insert state bindings. Evil-collection has a lot of good keybindings to enhance the experience with evil.
  #+begin_src emacs-lisp :tangle ./lisp/init-evil.el :mkdirp yes
    ;;; init-evil.el --- Initialize evil settings -*- lexical-binding: t -*-

    ;;; Code:

    (use-package evil
      :init
      (setq
       evil-want-integration t
       evil-want-keybinding nil
       evil-want-C-u-scroll t
       evil-want-C-i-jump nil
       evil-disable-insert-state-bindings t)
      (evil-mode 1)
      :config
      (evil-global-set-key 'insert (kbd "C-g") 'evil-normal-state)

      ;; Visual line motions
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      ;; Emacs flavour moving in normal and visual mode

      (evil-global-set-key 'motion (kbd "C-a") 'mwim-beginning-of-code-or-line)
      (evil-global-set-key 'motion (kbd "C-e") 'mwim-end-of-code-or-line)
      (evil-global-set-key 'insert (kbd "C-a") 'mwim-beginning-of-code-or-line)
      (evil-global-set-key 'insert (kbd "C-e") 'mwim-end-of-code-or-line)

      (evil-global-set-key 'motion (kbd "C-f") 'forward-char)
      (evil-global-set-key 'motion (kbd "C-b") 'backward-char)

      (evil-global-set-key 'normal (kbd "C-n") 'next-line)
      (evil-global-set-key 'normal (kbd "C-p") 'previous-line)

      (evil-global-set-key 'visual (kbd "C-n") 'next-line)
      (evil-global-set-key 'visual (kbd "C-p") 'previous-line)

      (evil-global-set-key 'insert (kbd "C-u") 'undo))

    (use-package evil-collection
      :after evil
      :init
      (evil-collection-init))

    (use-package evil-escape
      :after evil
      :init
      (setq-default evil-escape-key-sequence "jk")
      (setq-default evil-escape-delay 0.1)
      (evil-escape-mode))

    (unless (display-graphic-p)
      (use-package evil-terminal-cursor-changer
        :after evil
        :init
        (evil-terminal-cursor-changer-activate))) ;; or (etcc-on)

    (use-package evil-nerd-commenter
      :after evil)
    ;; TODO

    (provide 'init-evil)
  #+end_src

* init-ivy.el

  The Ivy bundle. Amx provides enhancements to ivy and counsel.
  #+begin_src emacs-lisp :tangle ./lisp/init-ivy.el :mkdirp yes
    ;;; init-ivy.el --- Initialize ivy configurations -*- lexical-binding: t -*-

    ;;; Code:

    (use-package ivy
      :diminish ivy-mode
      :init (ivy-mode 1)
      :custom
      (ivy-use-selectable-prompt 1)
      (ivy-initial-inputs-alist nil))

    (use-package ivy-rich
      :diminish ivy-rich-mode
      :after (ivy counsel)
      :init (ivy-rich-mode 1))

    (use-package swiper
      :bind (("C-s" . swiper)))

    (use-package counsel
      :diminish counsel-mode
      :init (counsel-mode 1))

    (use-package amx
      :ensure t)

    (provide 'init-ivy)
  #+end_src

* init-company.el

  Company is a text completion framework for Emacs. The name stands for “complete anything”. It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
  #+begin_src emacs-lisp :tangle ./lisp/init-company.el :mkdirp yes
        ;;; init-company.el --- COMplete ANYthing -*- lexical-binding: t -*-

        ;;; Code:

    (use-package company
      :diminish
      :hook (after-init . global-company-mode)
      :bind
      (:map company-active-map
            ("TAB" . company-complete-common-or-cycle)
            ("<tab>" . company-complete-common-or-cycle)
            ("RET" . company-complete-selection)
            ("<return>" . company-complete-selection))
      :init
      (setq company-minimum-prefix-length 3
            company-idle-delay 0.2
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil
            company-global-modes t
            company-backends '((company-capf :with company-yasnippet)
                               (company-dabbrev-code company-keywords company-files)
                               company-dabbrev)
            ))

    (provide 'init-company)
  #+end_src

* init-yasnippet.el

  YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
  #+begin_src emacs-lisp :tangle ./lisp/init-yasnippet.el :mkdirp yes
    ;;; init-yasnippet.el --- Configure yasnippet -*- lexical-binding: t -*-

    ;;; Code:

    (use-package yasnippet
      :diminish yas-minor-mode
      :hook (after-init . yas-global-mode))

    (use-package yasnippet-snippets
      :after yasnippet)

    (provide 'init-yasnippet)
  #+end_src

* init-ibuffer.el

  #+begin_src emacs-lisp :tangle ./lisp/init-ibuffer.el :mkdirp yes
    ;;; init-ibuffer.el --- Initialize ibuffer configurations -*- lexical-binding: t -*-

    ;;; Code:

    (use-package ibuffer
      :ensure nil
      :bind ("C-x C-b" . ibuffer)
      :hook (ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "custom")))
      :custom
      (ibuffer-show-empty-filter-groups nil)
      (ibuffer-saved-filter-groups
       '(("custom"
          ("Dired" (mode . dired-mode))
          ("Org" (mode . org-mode))
          ("Emacs" (or
                    (name . "^\\*scratch\\*$")
                    (name . "^\\*Backtrace\\*$")
                    (name . "^\\*Messages\\*$")))
          ("Help" (or
                   (name . "Help")
                   (name . "^helpful")))
          ))))

    (provide 'init-ibuffer)
  #+end_src
